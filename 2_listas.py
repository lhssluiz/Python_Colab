# -*- coding: utf-8 -*-
"""2. Listas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1siiu93hPyExuBMPKXtmTfcvjlCHZuChy

#Listas
"""

#iniciando com listas
lista = ['moto', 'carro', 'caminhão']
print(lista)
print(lista[0])
print(lista[2].title())

#adicionando itens ao fim de uma lista
lista.append('avião')
print(lista)

#inserindo valor em qualquer posição da lista
lista.insert(0,'caça')
print(lista)

#removendo valores da lista para sempre
del lista[2]
print("\nEsta remoção é do Delete".upper())
print(lista)

# removendo valores e trabalhando com estes
lista_pop = ['Honda', 'Dafra', 'Yamaha','Ducati']
print("\nEsta é a remoção com pop que guarda o valor removido".upper())
print(lista_pop)
lista_pop1 = lista_pop.pop()

print("\nEsta é a remoção com pop que guarda o valor removido".upper())
print(lista_pop1)
print("\nEsta é a remoção com pop com o resultado final na lista".upper())
print(lista_pop)

# removendo itens de acordo com o o seu valor (como ese fosse um if de remoção de lista)
print("\nEsta é a utilização do remove, para remover um valor específico da lista".upper())
lista_pop.remove('Dafra')
print(lista_pop)

# removendo um valor de uma lista que está dentro de uma variável
muito_caro = 'caça'
lista.remove(muito_caro)
print(lista)
print("\nEsse " + str(muito_caro).title() + " é muito caro para mim")
# O valor "remove" tira apenas a primeira ocorrência do valor, para tirar todas, é necessário um laço

# FAÇA VOCÊ MESMO LISTAS

lista_convite = ['Einsten', 'Newton','Mandela','Ghandi']
print("Meu querido " + str(lista_convite[0] + " vamos comer comida brasileira?"))

desistente = 'Einsten'
lista_convite.remove(desistente)
print(desistente)

lista_convite[0] = 'Yuval'
lista_convite.insert(0,'João')
lista_convite.insert(3,'Alberto')
lista_convite.append('Varal')
print("\nEssa é a lista com todo mundo" + str(lista_convite))

desistente = lista_convite.pop()
print("\nO " + str(desistente.title()) + " tá fora da lista e abaixo temos a nova lista: \n" + str(lista_convite))

"""## Organizando as listas"""

lista_ordenada = ['Kratos','Thor', 'Para','Série','Netflix']
print(lista_ordenada)
lista_ordenada.sort()
print("Lista em ordem " + str(lista_ordenada))

lista_ordenada.sort(reverse=True)
print("\nA lista ao contrário" + str(lista_ordenada))

# reverse inverte as posições dos itens
print("\nLista ordenada temporariamente " + str(sorted(lista_ordenada)))
len(lista_ordenada)

print(lista_ordenada[3-1])

"""# Trabalhando com listas e laços
Quando quiser executar a mesma ação em todos os itens de uma lista, você pode executar um laço 
https://www.devmedia.com.br/for-python-estrutura-de-repeticao-for/38513
"""

magicos = ['Alice', 'Joana', 'Raimunda']
for magico in magicos:    #Para todo mágico na lista de mágicos, exiba o nome mágico
  print(magico)

# Imprimindo a mesma coisa com uma composição de texto
for magico in magicos:
  print("\n" + magico.title() + " você fez um ótimo trabalho")

"""# Lidando com listas formada por números"""

for value in range(1,5): #como o valor é sempre deslocado -1, o resultado é de 1 a 4
  print(value)

numeros = list(range(1,6)) #fazer uma lista de numeros com range
print(numeros) 

numeros_pares = list(range(2,11,2)) #Mostrar somente pares: Inicia do 2, vai até 11 e pula de 2 em 2
print(numeros_pares)

quadrados = [] # Fazendo uma lista de quadrados perfeitos com for e range
for numbers in range(1,11):
  quadrado = numbers**2
  quadrados.append(quadrado)
print(quadrados)

"""# Usando funções específicas para lidar com listas de números"""

print(min(quadrados))
print(max(quadrados))
print(sum(quadrados)) # Eu usei o print para apresentar todos os valores, já que se colocar somente a função, só o último é exibido

"""# Usando Lists Comprehension
Sua sintaxe básica é:
```
# expr for item in lista
```
Em outras palavras: aplique a **expressão** expr **em cada item** da **lista**.

[Site explicando sobre list comprehension](https://pythonacademy.com.br/blog/list-comprehensions-no-python)
"""

quadrados = [value**2 for value in range (1,11)]
print(quadrados)

# Faça você mesmo: List comprehension and range

for contador in range(1,21):
  print(contador)
print("______________ \n")

lista_milhao = range(1,1000001)
print(min(lista_milhao))
print(max(lista_milhao))
print(sum(lista_milhao))

print("______________ \n")

lista_impar = range(1,21,2) # O terceiro argumento é o step range(start, stop, step)
for n in lista_impar:
  print(n)
print("______________ \n")

lista_cubos = [n**3 for n in range(1,10)]
print(lista_cubos)

"""# Trabalhando com fatias de uma lista"""

lista_fatia = ['Bruno', 'Armando', 'Pedro', 'Augusto']
print(lista_fatia[0:2])
print(lista_fatia[-2:]) # Quando se utiliza o negativo, a lista imprime do fim para o início
#___
print("\nEstes são os 3 primeiros jogadores")
for n in lista_fatia[:3]:
  print(n.title())

amigos = lista_fatia[:] #IMP: sem definir uma fatia e copiar somente a partir dos nomes, o que ocorre na verdade é a conxeão entre as listas
print(amigos)